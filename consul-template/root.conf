## ----------------------------------------------------------------------------
## Copyright (C) 2017 Verizon.  All Rights Reserved.
##
##   Licensed under the Apache License, Version 2.0 (the "License");
##   you may not use this file except in compliance with the License.
##   You may obtain a copy of the License at
##
##       http://www.apache.org/licenses/LICENSE-2.0
##
##   Unless required by applicable law or agreed to in writing, software
##   distributed under the License is distributed on an "AS IS" BASIS,
##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##   See the License for the specific language governing permissions and
##   limitations under the License.
##
## ----------------------------------------------------------------------------
log_level = "info"

vault {

  // This tells Consul Template that the provided token is actually a wrapped
  // token that should be unwrapped using Vault's cubbyhole response wrapping
  // before being used. Please see Vault's cubbyhole response wrapping
  // documentation for more information.
  unwrap_token = false

  // This option tells Consul Template to automatically renew the Vault token
  // given. If you are unfamiliar with Vault's architecture, Vault requires
  // tokens be renewed at some regular interval or they will be revoked. Consul
  // Template will automatically renew the token at half the lease duration of
  // the token. The default value is true, but this option can be disabled if
  // you want to renew the Vault token using an out-of-band process.
  //
  // Note that secrets specified in a template (using {{secret}} for example)
  // are always renewed, even if this option is set to false. This option only
  // applies to the top-level Vault token itself.
  renew_token = true

  retry {
    // This enabled retries. Retries are enabled by default, so this is
    // redundant.
    enabled = true

    // This specifies the number of attempts to make before giving up. Each
    // attempt adds the exponential backoff sleep time. Setting this to a
    // negative number will implement an unlimited number of retries.
    attempts = 5

    // This is the base amount of time to sleep between retry attempts. Each
    // retry sleeps for an exponent of 2 longer than this base. For 5 retries,
    // the sleep times would be: 250ms, 500ms, 1s, 2s, then 4s.
    backoff = "250ms"
  }
}
